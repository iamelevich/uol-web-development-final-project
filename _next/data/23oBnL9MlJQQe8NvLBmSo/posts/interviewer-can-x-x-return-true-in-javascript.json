{"pageProps":{"postData":{"id":"interviewer-can-x-x-return-true-in-javascript","contentHtml":"<p>Recently I was asked a few strange interview questions. They are different from the regular questions: these interview questions seem very easy, but they test your thorough understanding of JavaScript. How many can you answer correctly?</p>\n<p><img src=\"/images/interviewer-can-x-x-return-true-in-javascript.jpeg\" alt=\"Interviewer: Can  Return True in JavaScript\"></p>\n<h1>Can <code>x !== x</code> return true？</h1>\n<p>What should be the value of <code>x</code> to output <code>hello fatfish</code>?</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = ? <span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n<span class=\"hljs-keyword\">if</span> (x !== x) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n</code></pre>\n<p><strong>It’s amazing. Is there any value that is not equal to itself?</strong> However, there is a value <code>NaN</code> in JavaScript, which is not equal to any value or even itself.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-literal\">NaN</span> <span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n<span class=\"hljs-keyword\">if</span> (x !== x) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span>) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(x !== x) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Number</span>.isNaN(x)) <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h1>Can <code>(!isNaN(x) &amp;&amp; x !== x)</code> return true?</h1>\n<p>Okay, when we filter out <code>NaN</code>, what other value can make a value not equal to itself?</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = ? <span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n<span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">isNaN</span>(x) &amp;&amp; x !== x) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n</code></pre>\n<p>Maybe you know <code>object. Defineproperty</code>, which can help us solve this problem.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-built_in\">window</span>.x = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// Any value is OK</span>\n<span class=\"hljs-built_in\">Object</span>.defineProperty(<span class=\"hljs-built_in\">window</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, {\n  get () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.random()\n  }\n})\n<span class=\"hljs-built_in\">console</span>.log(x) <span class=\"hljs-comment\">// 0.12259077808826002</span>\n<span class=\"hljs-built_in\">console</span>.log(x === x) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(x !== x) <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h1>How to make <code>x === x + 1</code>?</h1>\n<p>This question may not be easy, but as long as you know JavaScript, you will know</p>\n<blockquote>\n<p>The Number.MAX_SAFE_INTEGER constant represents the maximum safe integer in JavaScript (2⁵³ — 1).(From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">MDN</a>)</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = ? <span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n<span class=\"hljs-keyword\">if</span> (x === x + <span class=\"hljs-number\">1</span>) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n</code></pre>\n<p>So we can assign <code>x</code> any value greater than <code>Number.MAX_SAFE_INTEGER</code>.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x =  <span class=\"hljs-built_in\">Number</span>.MAX_SAFE_INTEGER + <span class=\"hljs-number\">1</span><span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n<span class=\"hljs-keyword\">if</span> (x === x + <span class=\"hljs-number\">1</span>) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n</code></pre>\n<h1>Can <code>x &gt; x</code> be true？</h1>\n<p>I don’t want to read anymore, what kind of rubbish question is that?</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = ? <span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n<span class=\"hljs-keyword\">if</span> (x &gt; x) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n</code></pre>\n<p>Although it seems unlikely, how can a value be greater than itself? However, we can use the <code>Symbol.toPrimitive</code> feature to complete the question.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = { <span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1</span>,\n  [ <span class=\"hljs-built_in\">Symbol</span>.toPrimitive ] () {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-built_in\">this</span>.value)\n    <span class=\"hljs-keyword\">return</span> --<span class=\"hljs-built_in\">this</span>.value\n  }\n}\n\n<span class=\"hljs-keyword\">if</span> (x &gt; x) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n</code></pre>\n<p><strong>Wow, that’s amazing!</strong></p>\n<h1><code>typeof x === ‘undefined’ &amp;&amp; x.length &gt; 0</code> ?</h1>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = ? <span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;undefined&#x27;</span> &amp;&amp; x.length &gt; <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n</code></pre>\n<p>I have to admit that JavaScript is an amazing language. Besides undefined itself, what other value can make <code>typeof x === undefined</code> <code>true</code>?</p>\n<p>The answer is document. All An HTMLAllCollection which contains every element in the document (from <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/all\">MDN</a>).</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-built_in\">document</span>.all <span class=\"hljs-comment\">// Please fill in the value of &quot;x?</span>\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;undefined&#x27;</span> &amp;&amp; x.length &gt; <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hello fatfish&#x27;</span>)\n}\n\n<span class=\"hljs-built_in\">console</span>.log(x)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> x)\n<span class=\"hljs-built_in\">console</span>.log(x === <span class=\"hljs-literal\">undefined</span>)\n</code></pre>\n","title":"Interviewer: Can `x !== x` Return True in JavaScript","date":"2022-04-29","authorName":"fatfish","authorLink":"https://fatfish.medium.com/","source":"https://medium.com/javascript-in-plain-english/interviewer-can-x-x-return-true-in-javascript-7e1d1fa7b5cd","sourceName":"Medium","image":"/images/interviewer-can-x-x-return-true-in-javascript.jpeg"}},"__N_SSG":true}