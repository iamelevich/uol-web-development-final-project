{"pageProps":{"postData":{"id":"learn-go-workspaces","contentHtml":"<p>In this tutorial, we will learn about multi-module workspaces that were introduced in Go 1.18</p>\n<p><img src=\"/images/learn-go-workspaces.png\" alt=\"Learn Go: Workspaces\"></p>\n<p>Workspaces allow us to work with multiple modules simultaneously without having to edit <code>go.mod</code> files for each module. Each module within a workspace is treated as a root module when resolving dependencies.</p>\n<p>To understand this better, let’s start by creating a <code>hello</code> module</p>\n<pre class=\"hljs\"><code>$ mkdir workspaces &amp;&amp; <span class=\"hljs-built_in\">cd</span> workspaces\n$ mkdir hello &amp;&amp; <span class=\"hljs-built_in\">cd</span> hello\n$ go mod init hello\n</code></pre>\n<p>For demonstration purposes, I will add a simple <code>main.go</code> and install an example package.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\t<span class=\"hljs-string\">&quot;golang.org/x/example/stringutil&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tresult := stringutil.Reverse(<span class=\"hljs-string\">&quot;Hello Workspace&quot;</span>)\n\tfmt.Println(result)\n}\n</code></pre>\n<pre class=\"hljs\"><code>$ go get golang.org/x/example\ngo: downloading golang.org/x/example v0.0.0-20220412213650-2e68773dfca0\ngo: added golang.org/x/example v0.0.0-20220412213650-2e68773dfca0\n</code></pre>\n<p>And if we run this, we should see our output in reverse.</p>\n<pre class=\"hljs\"><code>$ go run main.go\necapskroW olleH\n</code></pre>\n<p>This is great, but what if we want to modify the <code>stringutil</code> module that our code depends on?</p>\n<p>Until now we had to do it using the <code>replace</code> directive in the <code>go.mod</code> file, but now let’s see how we can use workspaces here.</p>\n<p>So let’s create our workspace in the <code>workspace</code> directory</p>\n<pre class=\"hljs\"><code>$ go work init\n</code></pre>\n<p>This will create a <code>go.work</code> file</p>\n<pre class=\"hljs\"><code>$ cat go.work\ngo 1.18\n</code></pre>\n<p>We will also add our <code>hello</code> module to the workspace.</p>\n<pre class=\"hljs\"><code>$ go work use ./hello\n</code></pre>\n<p>This should update the <code>go.work</code> file with a reference to our <code>hello</code> module</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">go</span> <span class=\"hljs-number\">1.18</span>\n\nuse ./hello\n</code></pre>\n<p>Now let’s download and modify the <code>stringutil</code> package and update the Reverse function implementation</p>\n<pre class=\"hljs\"><code>$ git <span class=\"hljs-built_in\">clone</span> https://go.googlesource.com/example\nCloning into <span class=\"hljs-string\">&#x27;example&#x27;</span>...\nremote: Total 204 (delta 39), reused 204 (delta 39)\nReceiving objects: 100% (204/204), 467.53 KiB | 363.00 KiB/s, <span class=\"hljs-keyword\">done</span>.\nResolving deltas: 100% (39/39), <span class=\"hljs-keyword\">done</span>.\n</code></pre>\n<p><code>example/stringutil/reverse.go</code></p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Reverse</span><span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">&quot;I can do whatever!! %s&quot;</span>, s)\n}\n</code></pre>\n<p>Finally, let’s add <code>example</code> package to our workspace</p>\n<pre class=\"hljs\"><code>$ go work use ./example\n$ cat go.work\ngo 1.18use (\n\t./example\n\t./hello\n)\n</code></pre>\n<p>Perfect, now if we run our <code>hello</code> module we will notice that the <code>Reverse</code> function has been modified.</p>\n<pre class=\"hljs\"><code>$ go run hello\nI can <span class=\"hljs-keyword\">do</span> whatever!! Hello Workspace\n</code></pre>\n<blockquote>\n<p>This is a very underrated feature from Go 1.18 but it is quite useful in certain circumstances.</p>\n</blockquote>\n<p>So this is pretty much it for workspaces in Go, I’ll see you in the next tutorial.</p>\n<blockquote>\n<p>Originally published at <a href=\"https://www.karanpratapsingh.com\">https://www.karanpratapsingh.com</a> on May 4, 2022.</p>\n</blockquote>\n","title":"Learn Go: Workspaces","date":"2022-05-03","authorName":"Karan Pratap Singh","authorLink":"https://medium.com/@karan99","source":"https://medium.com/@karan99/learn-go-workspaces-3393922d69f1","sourceName":"Medium","image":"/images/learn-go-workspaces.png"}},"__N_SSG":true}